name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

defaults:
  run:
    shell: powershell

jobs:
  General:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2016, windows-2019]
    steps:
      - uses: actions/checkout@v2
      - name: PSVersion Table
        run: $psversiontable
      - name: Install
        run: |
          $ErrorActionPreference = "Stop"
          & .\extras\install.ps1 -Verbose
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }
      - name: Run Tests
        run: |
          $ErrorActionPreference = "Stop"
          Import-Module .\src\puppet.dsc.psd1
          $testResultsFile = ".\AcceptanceTestsResults.xml"
          $TestPath = @(
            (Resolve-Path .\src\tests\general)
          )
          $Results = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru -Path $TestPath
          if ($Results.FailedCount -gt 0) {
            throw "$($Results.FailedCount) tests failed."
          }

  Unit:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2016, windows-2019]
    steps:
      - uses: actions/checkout@v2
      - name: PSVersion Table
        run: $psversiontable
      - name: Module Versions
        run: |
          Get-Module PowerShellGet, PackageManagement -ListAvailable
      - name: Install
        run: |
          $ErrorActionPreference = "Stop"
          & .\extras\install.ps1 -Verbose
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }
      - name: Run Tests
        run: |
          $ErrorActionPreference = "Stop"
          Import-Module .\src\puppet.dsc.psd1
          $testResultsFile = ".\AcceptanceTestsResults.xml"
          $TestPath = @(
            (Resolve-Path .\src\functions)
            (Resolve-Path .\src\internal\functions)
          )
          $Results = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru -Path $TestPath
          if ($Results.FailedCount -gt 0) {
            throw "$($Results.FailedCount) tests failed."
          }

  Acceptance-Basic:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2016, windows-2019]
        pwshlib_source: [forge, git]
        include:
          - pwshlib_source: git
            pwshlib_branch: main
    steps:
      - uses: actions/checkout@v2
      - name: PSVersion Table
        run: $psversiontable
      - name: Install
        run: |
          $ErrorActionPreference = "Stop"
          & .\extras\install.ps1 -Full -Verbose
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }
      - name: Run Tests
        run: |
          $ErrorActionPreference = "Stop"
          Import-Module .\src\puppet.dsc.psd1

          $testResultsFile = ".\AcceptanceTestsResults.xml"
          $TestPath = @(
            (Resolve-Path .\acceptance\Basic.Tests.ps1)
          )

          If ('${{ matrix.pwshlib_source }}' -eq 'forge') {
            $FixtureHash = @{
              Section = 'forge_modules'
              Repo    = 'pupptlabs/pwshlib'
            }
          } ElseIf ('${{ matrix.pwshlib_source }}' -eq 'git') {
            $FixtureHash = @{
              Section = 'repositories'
              Repo    = 'git://github.com/puppetlabs/ruby-pwsh.git'
              Branch  = '${{ matrix.pwshlib_branch }}'
            }
          }

          "Fixture Hash:`r`n$($FixtureHash | Out-String)"

          $container = New-PesterContainer -Path $TestPath -Data @{ FixtureHash = $FixtureHash }
          $Results = Invoke-Pester -Container $container -PassThru -Output Detailed
          $Results | ConvertTo-NunitReport -AsString | Out-File $testResultsFile

          if ($Results.FailedCount -gt 0) {
            throw "$($Results.FailedCount) tests failed."
          }
